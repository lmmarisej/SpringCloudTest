spring.application.name=Gateway Java API
server.port=8222
logging.level.ROOT=INFO
spring.redis.database=0
spring.redis.host=127.0.0.1
spring.redis.port=6379
# 路由
spring.cloud.gateway.routes[0].id=test-ip
spring.cloud.gateway.routes[0].uri=lb://test-ip
#路由满足条件。根据输入参数返回布尔值
spring.cloud.gateway.routes[0].predicates[0]=Path=/test-ip/**
# 给请求增加header参数
#spring.cloud.gateway.routes[0].filters[0]=AddRequestParameter=key_name,key_value
# 路由容错
spring.cloud.gateway.routes[1].id=Fault-Tolerance Routing
spring.cloud.gateway.routes[1].uri=forward:/notfound
spring.cloud.gateway.routes[1].predicates[0]=Path=/notfound/**
# 启用服务发现
spring.cloud.gateway.discovery.locator.enabled=true
spring.cloud.consul.host=localhost
spring.cloud.consul.port=8500
# 熔断
feign.hystrix.enabled=true
spring.cloud.gateway.routes[2].id=Fault-Tolerance Routing Hystrix
spring.cloud.gateway.routes[2].uri=lb://service-provider
spring.cloud.gateway.routes[2].predicates[0]=Path=/hello
spring.cloud.gateway.routes[2].filters[0].name=Hystrix
spring.cloud.gateway.routes[2].filters[0].args.name=fallbackcmd
# Hystrix熔断时fallback调用地址
spring.cloud.gateway.routes[2].filters[0].args.fallbackUri=forward:/fallback
#限流
spring.cloud.gateway.routes[3].id=test-limit
spring.cloud.gateway.routes[3].uri=lb://test-limit
spring.cloud.gateway.routes[3].predicates[0]=Path=/test-limit/**
# 使用Gateway内置算法
spring.cloud.gateway.routes[3].filters[0].name=RequestRateLimiter
# 令牌补充频率，每次一个
spring.cloud.gateway.routes[3].filters[0].args.redis-rate-limiter.replenishRate=1
# 令牌桶容量，允许1s内完成的最大请求数
spring.cloud.gateway.routes[3].filters[0].args.redis-rate-limiter.burstCapacity=2
# 限流解析器beanName，SpEL表达式，用于从IoC容器中获取bean
spring.cloud.gateway.routes[3].filters[0].args.key-resolver=#{@ipKeyResolver}
# 端点
# 动态增加路由 /actuator/gateway/routes/{id}
management.endpoint.gateway.enabled=true
# http://192.168.68.175:8222/actuator/gateway/routefilters
management.endpoints.web.exposure.include=gateway